
Generate the internal version number from a git hook


----

Multicore use---have a tuple array per core (thread).  Sure, a reference
might go to core1 the first time, and core2 the second, and coren the nth
time, but eventually it'll get through.  And evidence has shown that even an
initial delay is good enough for 90+% of the spam.  This does, however, have
an interesting side effect---we can go faster but slow mail down even more.

----

getaddrinfo
see ~/source/ipv6 for samples.
---

gld-secret:			decafbad
gld-timeformat:			%c

server-host:			localhost
server-bind:			localhost
server-port:			9990
server-pid:			/var/run/gld.pid
server-statedir:		/var/state/gld
server-log-id:			gld
server-log-facility:		local6
server-log-level:		info
server-max-tuples:		65536
server-timeout-save:		1h
server-timeout-cleanup:		5m
server-timeout-embargo:		25m
server-timeout-greylist:	6h
server-timeout-whitelist:	36d

mcp-helpdir:			/usr/local/share/gld
mcp-pager:			/bin/more
mcp-host:			0.0.0.0
mcp-port:			9990
mcp-server-host:		localhost
mcp-server-port:		9990
mcp-timeout:			5s
mcp-log-id:			gld-mcp
mcp-log-facility:		local5
mcp-log-level:			err

postfix-host:			0.0.0.0
postfix-port:			0
postfix-server-host:		localhost
postfix-server-port:		9990
postfix-timeout:		5s
postfix-log-id:			gld-pfc
postfix-log-facility:		local5
postfix-log-level:		info

sendmail-pid:			/var/run/smc.pid
semdmail-host:			0.0.0.0
sendmail-port:			0
sendmail-server-host:		localhost
sendmail-server-port:		9990
sendmail-filterchannel:		unix:/var/state/gld/milter
sendmail-host:			0.0.0.0
sendmail-timeout:		5s
sendmail-log-id:		gld-smc
sendmail-log-facility:		local5
sendmail-log-level:		info
sendmail-max-stack:		64k

Lua maybe?

************************************************************************

gld =
{
  defaults = 
  {
    secret     = "decafbad",
    timeformat = "%c",
    timeout    = "5s",
    host       = ANYHOST,
    port       = ANYPORT,

    server = 
    {
      host = "localhost",
      port = 9990
    },

    syslog = 
    {
      id = "changeme",
      facility = "local5",
      level    = "info"
    }
  },

  -- *****************************************************

  server = 
  {
    host      = "localhost",
    port      = 9990,
    pidfile   = "/var/run/gld.pid",
    statedir  = "/var/state/gld",
    maxtuples = 65536,

    syslog =
    {
      id       = "gld",
      facility = "local6",
      level    = "info"
    },

    timeout = 
    {
      save      = "1h",
      cleanup   = "5m",
      embargo   = "25m",
      greylist  = "6h",
      whitelist = "36d"
    },
  },

  -- ****************************************************

  mcp =
  {
    helpdir = "/usr/local/share/gld",
    pager   = "/bin/more",
    syslog  = 
    {
      id       = "gld-mcp",
      level    = "err"
    },
  },

  -- ****************************************************

  postfix = 
  {
    syslog = { id = "gld-pfc" }
  },

  -- ****************************************************

  sendmail = 
  {
    pidfile       = "/var/run/smc.pid",
    filterchannel = "unix:/var/state/gld/milter",
    maxstack      = "64k",
    syslog        = { id = "gld-smc" }
  }
}

*************************************************************************

Perhaps an option to just store the CRC of the tuple, instead of the full
thing.  Might let a few more tuples through, but would be that much faster
and store a metric buttload order of magnitude of tuples.

Idea from http://slett.net/spam-filtering-for-mx/exim-greylisting.html


----




http://greylisting.org/forums/showthread.php?tid=3
http://cvs.puremagic.com/viewcvs/*checkout*/greylisting/schema/whitelist_ip.txt
http://www.cymru.com/Documents/bogon-bn-nonagg.txt
http://www.completewhois.com/bogons/data/bogons-cidr-all.txt

http://www.openbsd.org/cgi-bin/man.cgi?query=spamd&apropos=0&sektion=8&manpath=OpenBSD+Current&arch=i386&format=html
	greylisting on spamd on OpenBSD?


http://judy.sourceforge.net/doc/10minutes.htm
http://www.nothings.org/computer/judy/
	Judy trees

maybe use a 4-bit tri to lookup IP addresses

http://www.postfix.org/SMTPD_POLICY_README.html
http://www.sendmail.org/doc/sendmail-current/libmilter/docs/

-------------

http://www.policyd.org/features.html	posfix
http://www.tahina.priv.at/~cm/spam/	postfix
http://hcpnet.free.fr/milter-greylist/	sendmail
http://www.acme.com/software/graymilter/ sendmail (only IP)


http://lists.puremagic.com/pipermail/greylist-users/2005-September/000995.html

points at which we can check for spam:

at connect time
prior to HELO
HELO response
MAIL FROM
RCPT TO
DATA






Okay, the way Postfix does things, it screws the pooch.  So, reorg time.

On the postfix side:

	while(1)
	{
		name = LineRead(STDIN);
		value = strchr(name,'=');
		eos   = strchr(value,'\n');
		*value++ = '\0';
		*eos     = '\0';

		// pull out request, from, to, ip
		if (all_data) break;
	}

	// package it up in a UDP packet
	// fire it off to the greylist daemon host
	// wait up to 10 seconds for the response

	if (okay)
		LineSFormat(STDOUT,"permit blah blah");
	else
		LineSFormat(STDOUT,"dunno");

On the daemon side:

	while(1)
	{
		packet = recieve();
		t = tuple_lookup(packet.ip,packet.from,packet.to);
		if (t == nil)
			create_tuple(t);
		else
			// rest of logic
	}

The packet:

struct greylist_request
{
  uint16 version;
  uint16 MTA;
  uint16 type;			/* 0 - greylist query */
  uint16 ipsize;
  uint16 fromsize;
  uint16 tosize;
  uint8  ip  [ipsize];
  char   from[fromsize];	/* '\0' terminated-not included in size */
  char   to  [tosize];		/* '\0' terminated-not included in size */
};


the return packet

struct greylist_reply
{
  uint16 version;
  uint16 MTA;
  uint16 type;		/* 1 - greylist response */
  uint16 response;	/* 0 - whitelist, >0 - greylist */
};

future revisions?

struct greylist_banip
{
  uint16 version;
  uint16 MTA;
  uint16 type;		/* 2 - banip - 3 - banip-rep */
  uint16 ipsize;
  uint8  ip[ipsize];
};

struct greylist_banfrom
{
  uint16 version;
  uint16 MTA;
  uint16 type;		/* 3 - banfrom - 4 - banfrom-rep */
  uint16 fromsize;
  char   from[fromsize];	/* ASCII0 */
};

------------

Look at using SA_RESTART for signals.

use pipe() to create a pipe.  epoll() on the read end. have the signals that
do stuff other than exit, write the signal number to the write end of the
pipe.  The readend gets notified of data, and we dispatch on that.  That
way, we don't have to busy-check the signals we're interested in.


format for whitelist:
	time ip from to
	...

reading in whitelist:

	Zen = mtime of tile
	Tao = now
	d   = Tao - Zen

	for each entry in whitelist
		read in
		adjust time by d
		if > c_timeout_whitelist reject

